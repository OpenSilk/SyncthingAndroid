/*
 * Copyright (c) 2015 OpenSilk Productions LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

// Versioning
def versionMajor = 0
def versionMinor = 5
def versionPatch = 1
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

assert(versionMinor < 100) // Double digits
assert(versionPatch < 100) // Double digits
assert(versionBuild < 100) // Double digits

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "org.opensilk.syncthing"
        minSdkVersion 16
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName String.format("%d.%d.%d", versionMajor, versionMinor, versionPatch)
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix getDebugVersionSuffix()
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }


    lintOptions {
        checkReleaseBuilds false//Lambdas
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    if (file('../../KeyStore').exists()) {
        signingConfigs {
            release {
                def Properties keyProps = new Properties()
                keyProps.load(new FileInputStream(file('../../KeyStore/release-syncthing.properties')))
                storeFile file(keyProps["store"])
                keyAlias keyProps["alias"]
                storePassword keyProps["storePass"]
                keyPassword keyProps["pass"]
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
        signingConfigs {
            debug {
                def Properties keyProps = new Properties()
                keyProps.load(new FileInputStream(file('../../KeyStore/debug2.properties')))
                storeFile file(keyProps["store"])
                keyAlias keyProps["alias"]
                storePassword keyProps["storePass"]
                keyPassword keyProps["pass"]
            }
        }
        buildTypes.debug.signingConfig signingConfigs.debug
        def Properties otherProps = new Properties();
        otherProps.load(new FileInputStream(file('../../KeyStore/syncthing.properties')))
        defaultConfig.buildConfigField "String", "ACRA_REPORTING_URL", otherProps.acraReportingUrl
        defaultConfig.buildConfigField "String", "ACRA_REPORTING_USR", otherProps.acraReportingUsr
        defaultConfig.buildConfigField "String", "ACRA_REPORTING_PASS", otherProps.acraReportingPass
    } else {
        println "No KeyStore directory found! (You can ignore this warning if your name is not drew)"
        defaultConfig.buildConfigField "String", "ACRA_REPORTING_URL", "null"
        defaultConfig.buildConfigField "String", "ACRA_REPORTING_USR", "null"
        defaultConfig.buildConfigField "String", "ACRA_REPORTING_PASS", "null"
    }
}

dependencies {
    provided(group: 'com.google.dagger', name:'dagger-compiler', version: rootProject.ext.dagger2Version)
    compile (group: 'com.jakewharton.rxbinding', name:'rxbinding', version: rootProject.ext.rxBindingVersion)
    compile (group:'commons-io', name: 'commons-io', version: rootProject.ext.commonsIoVersion)
    compile 'org.zeroturnaround:zt-zip:1.9-SNAPSHOT'
    compile (group: 'ch.acra', name:'acra', version: rootProject.ext.acraVersion)

    compile project(':common-ui')
    compile project(':app-rest-client')

    testCompile (group:"junit", name:"junit", version: rootProject.ext.testJunitVersion)
    testCompile (group:"org.assertj", name:"assertj-core", version: rootProject.ext.testAssertJVersion)
    testCompile (group:"org.robolectric", name:"robolectric", version : rootProject.ext.testRobolectricVersion)
    testCompile (group:"org.mockito", name:"mockito-core", version: rootProject.ext.testMockitoVersion)
    testCompile (group:'commons-io', name: 'commons-io', version: rootProject.ext.commonsIoVersion)
    testCompile (group:'com.squareup.okhttp', name:'mockwebserver', version: rootProject.ext.okHttpVersion)
}
